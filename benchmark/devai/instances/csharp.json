{
    "name": "Стандарты C#-проекта",
    "query": "Разработайте C#-проект в соответствии с указанными руководящими принципами.",
    "tags": [
        "C#",
        "Структура проекта",
        "Лучшие практики"
    ],
    "requirements": [
        {
            "requirement_id": 0,
            "prerequisites": [],
            "criteria": "Nuget пакеты, по возможности, должны быть обновлены до последних версий и не иметь уязвимостей. Если транзитивный Nuget пакет имеет уязвимость, значит он должен быть включен в проект и обновлен до актуальной версии. Проект не должен иметь лишних зависимостей или зависимостей, ссылающихся на локальные файлы (для таких зависимостей прописан абсолютный путь).",
            "category": "Структура проекта",
            "satisfied": null
        },
        {
            "requirement_id": 1,
            "prerequisites": [],
            "criteria": "В коде не должно быть неразрешенных TODO. Не должно быть закомментированного или неиспользуемого кода. Код с атрибутом Obsolete , по возможности, должен быть удален. Обязательное наличие комментариев для моделей, сущностей и т.д. Стоит обращать внимание на неиспользуемые переменные или неиспользуемый возврат из методов.",
            "category": "Код",
            "satisfied": null
        },
        {
            "requirement_id": 2,
            "prerequisites": [],
            "criteria": "Запрещено дублировать сообщения при логировании исключения. Запрещено объединения строк с помощью оператора + вместо литералов необработанных строк. Запрещено использование прямых вычислений вместо методов конвертации. Запрещено делать лишнюю проверка на null для арифметический операций.",
            "category": "Код",
            "satisfied": null
        },
        {
            "requirement_id": 3,
            "prerequisites": [],
            "criteria": "Запрещено делать неправильную регистрацию сервисов в IoC контейнере, когда HostedService должен быть доступен как Singleton. Запрещено делать возврат null вместо пустой коллекции. Запрещено делать возврат коллекции c null элементами. Проверку передаваемых аргументов стоит выполнять в методе, а не в вызове метода. Если возврат null из метода, является исключением, то исключение нужно кидать в методе, а не в клиентском коде.",
            "category": "Код",
            "satisfied": null
        },
        {
            "requirement_id": 4,
            "prerequisites": [],
            "criteria": "Запрещено использование Skip().Take() , вместо Chunk(). Запрещено использование методов Union() , Except() , Intersect() , Distinct() , SequenceEqual() , при работе с пользовательским типом данных, для которого не переопределены методы Equals() и GetHashCode() или не реализован интерфейс IEquatable<T>. Запрещено использование Distinct() , после Union(). Запрещено появление лишнего ToArray() или ToList(). ",
            "category": "Код",
            "satisfied": null
        },
        {
            "requirement_id": 5,
            "prerequisites": [],
            "criteria": "Запрещено использование синхронных методов материализации, вместо асинхронных. Запрещено удаление сущностей в цикле. Запрещено делать лишнюю материализация при удалении элементов. Запрещено делать вызов SaveChangesAsync() после каждого действия. Запрещено выполнение фильтрации на стороне приложения, а не БД. Запрещено использование AddAsync() и AddRangeAsync() вместо Add и AddRange(), если не используется SqlServerValueGenerationStrategy.SequenceHiLo",
            "category": "Код",
            "satisfied": null
        }
    ],
    "preferences": [
        {
            "preference_id": 0,
            "criteria": "Убедитесь, что классы и методы модульные и легко расширяемые.",
            "satisfied": null
        }
    ],
    "is_kaggle_api_needed": false,
    "is_training_needed": false,
    "is_web_navigation_needed": false
}